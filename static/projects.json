{
    "projects": [
        {
            "subject": "온라인 기반 도로 파손 기록 체계 수립",
            "period": "2021.07 ~ 2021.09",
            "belong": "2021 공공데이터 일경험 수련생(MOTOV)",
            "role": "인턴",
            "skills": [
                "Google Maps",
                "Google My Maps",
                "Google Docs",
                "RESTful API"
            ],
            "challenges": [
                "도로 파손 유형에 따른 시각적 구분",
                "비개발자 인턴과의 협업",
                "Google MyMaps에 좌표 데이터 추가"
            ],
            "contributions": [
                "Google MyMaps 생성 및 협업 인턴과의 공유",
                "Google TimeLine을 이용한 이동 경로 기록",
                "공공데이터포털 API 및 담당 부서 xml 데이터를 이용한 Google MyMaps 좌표 데이터 추가",
                "초기 Google Docs 템플릿 생성 및 협업 인턴과의 공유"
            ],
            "performance": [
                "사전 준비 단계부터 최종 보고서 작성까지의 프로세스 시간이 기존 2일 소요에서 7시간으로 단축 (약 85% 단축)",
                "GPS 활용에 따른 위치 정보 오차범위 10m 이내로 개선",
                "Google Docs를 활용해 협업 과정에서 누적되는 파일의 버전 관리 및 보안성 향상"
            ],
            "description": [
                "MOTOV 협업 택시를 타고 이동하며 도로 파손 지점 및 영상 데이터 수집",
                "네이버 지도 인쇄물에 파손 지점을 기록 후 PowerPoint로 보고서 작성",
                "낮은 위치 정확도, 긴 보고서 작성 시간, 불편한 협업을 해결하기 위해 Google MyMaps, Google Maps TimeLine 기반으로 운용",
                "작업 중 어린이 보호 구역 정보를 반영하기 위해 공공데이터포털 API를 활용하여 Google MyMaps에 추가",
                "Google Docs를 이용하여 두 명 이상의 인턴이 동시에 협업 보고서 작성"
            ],
            "result": [
                "종이 인쇄물 대비 준비 시간 단축 및 운행 과정에서 수정된 경로 실시간 반영",
                "독도법(讀圖法) 기반 도로 파손 마킹 및 보고서 작성 과정의 위치 정보 오차 최소화",
                "Google Docs 공유를 통해 보고서 작성 시간 단축"
            ],
            "insight": [
                "목적에 따라 다양한 기술을 활용함으로써 별도의 비용 없이 업무의 효율성을 높일 수 있음을 배움",
                "무단 수정 등의 부작용 방지를 위해 IAM 설정을 통한 보안 조치가 필요함을 배움",
                "iOS의 경우, 별도 설정이 필요함 등과 같이 다양한 환경을 고려해야 함을 배움"
            ],
            "improvement": [
                "어린이 보호 구역의 경우, 범위 데이터이므로 중심 지점 마킹이 아닌 범위 표시가 나을 수 있음",
                "운영 주체를 인턴 개인이 아닌 팀 단위 혹은 조직 단위로 변경하여, 보안성 및 협업성을 높일 수 있음"
            ],
            "reference": [
                "<iframe loading=async src=\"https://www.google.com/maps/d/embed?mid=1OvKzDkKuCd2xmde8QOCnCy6OyJZ1jz_X&ehbc=2E312F\" width=\"315\" height=\"236.25\"></iframe>",
                "<iframe loading=async src=\"https://www.google.com/maps/d/embed?mid=1mhBh0Zl4V50jxAb4vzn2oNFn7sx2vP-T&ehbc=2E312F\" width=\"315\" height=\"236.25\"></iframe>",
                "<iframe loading=async src=\"https://www.google.com/maps/d/embed?mid=1p8-8zpvYnb5Y-FAEzWwMcxxG8dnjBvDi&ehbc=2E312F\" width=\"315\" height=\"236.25\"></iframe>"
            ]
        },
        {
            "subject": "가톨릭대(CUK) NFC 스티커 학생증 개발",
            "period": "2022.04 ~ 2022.06",
            "belong": "2816",
            "role": "책임자",
            "skills": [
                "SQLite3",
                "Proxmark3",
                "NFC",
                "Python",
                "RSA Encryption"
            ],
            "challenges": [
                "학생증 내 RFID 정보 스캔, 분석 및 복제",
                "NFC 데이터와 관련된 보안 정책 협의 및 접근 제어",
                "NFC 데이터베이스의 보안 및 효율적인 관리 방안 마련"
            ],
            "contributions": [
                "Proxmark3 장비 기반 LF 및 HF RFID 정보 수집 및 데이터 처리 자동화",
                "SQLite3로 구축된 데이터베이스를 통해 각 학생의 NFC 데이터를 효율적으로 관리",
                "Python 기반 데이터 수집 자동화와 비개발자 접근성을 고려한 CLI 환경 구축"
            ],
            "performance": [
                "SQLite3를 통해 데이터 관리 효율성을 높이고, NFC 데이터 관리 소요 시간을 10% 단축",
                "NFC 스티커 도입 이후, COVID-19 기간 동안 학생증 분실률 감소로 인해 학교 측 유지비용 절감",
                "CLI 작업 대비 Python 자동화 스크립트 사용 시 작업 속도 약 10% 향상"
            ],
            "description": [
                "Proxmark3를 사용해 가톨릭대 학생증 NFC 데이터를 분석하고 RFID 정보 복제",
                "SQLite3 기반 데이터베이스 구축을 통해 NFC 데이터 관리 및 정보 보호 효율성을 높임",
                "NFC 데이터 처리 과정을 자동화하여 수집 시간을 단축하고 비개발자도 사용할 수 있도록 CLI 환경 지원",
                "학교와 협의하여 보안 문제 해결 및 학생의 접근성 향상을 위해 각 부서와 협력"
            ],
            "result": [
                "NFC 스티커를 통해 학생증 시스템을 성공적으로 개선하고, 학생증 분실률을 감소시킴",
                "교내 학생 접근성 개선과 통제 프로세스를 효율적으로 운영하는 데 기여",
                "외부 수입에 의존하던 학생증 시스템의 비용 구조 개선과 IT 부문으로의 확장 기여"
            ],
            "insight": [
                "NFC 데이터의 보안 관리와 UX의 균형이 중요한 과제였음을 배움",
                "보안 강화와 사용자 편의성 간의 조화를 맞추기 위해 부서 간 협의가 중요함을 깨달음",
                "프로젝트 과정에서 초기 사용자 피드백의 중요성과 테스트의 중요성 인식"
            ],
            "improvement": [
                "비개발자 동료를 위한 GUI 프로그램을 PyInstaller로 전환하여 접근성 강화 계획",
                "RFID 데이터의 보안을 위해 RSA 암호화 적용 검토"
            ],
            "reference": [
                "/reference_imgs/nfc_1.webp",
                "/reference_imgs/nfc_2.webp"
            ]
        },
        {
            "subject": "On-Premise 서버 구축 및 관리",
            "period": "2022.12 ~ 2024.06",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Ubuntu",
                "OpenSSH",
                "Docker",
                "Grafana",
                "Prometheus",
                "Network Security"
            ],
            "challenges": [
                "제한된 예산 내에서의 서버 구축 및 성능 최적화",
                "애플리케이션 성능을 고려한 서버 자원 요구 사항 분석",
                "서버 모니터링과 알림 설정을 통한 성능 유지",
                "협업을 위한 서버 사용 체계 구축",
                "주기적인 서버 OS 및 소프트웨어 업데이트 관리",
                "SSH 보안 강화 및 외부 공격 방지"
            ],
            "contributions": [
                "Ubuntu Server OS 선정 및 설치와 초기 네트워크 구성",
                "Docker를 활용한 협업 환경 설정 및 운영",
                "Grafana와 Prometheus를 통한 서버 상태 모니터링, 다운타임 알림 설정으로 인한 안정성 개선",
                "서버 자원 부족 문제를 해결하기 위한 랙 서버 추가 구성 및 자원 관리 최적화",
                "SSH 보안 설정과 사용자 권한 관리 강화로 외부 무작위 접근 방지"
            ],
            "performance": [
                "On-Premise 서버 운영으로 클라우드 서비스 비용 약 40% 절감",
                "서버 모니터링과 알림 설정으로 인해 서버 다운타임 약 30% 감소",
                "서버 사용 협업 체계 수립으로 제한된 리소스 효율적으로 관리"
            ],
            "description": [
                "장기지원에 따른 보안성, 커뮤니티 지원 등을 고려해 CentOS가 아닌 Ubuntu 20.04 LTS를 선택하여 서버 구축",
                "OpenSSH를 설정하여 초기 서버 관리 환경 구성 및 서버 보안 강화",
                "Grafana와 Prometheus, Dcgm-exporter를 사용해 서버 성능을 실시간으로 모니터링하고 자원 최적화",
                "인공지능 서비스 운영을 위한 사용량 증가에 대응하기 위해 랙 서버 추가 구축 및 성능 조정",
                "Docker 기반 협업 환경을 구축해 코드 배포와 작업 환경의 일관성 확보"
            ],
            "result": [
                "On-Premise 서버를 통한 비용 절감 및 안정적 서비스 운영에 기여",
                "서버 모니터링으로 인한 다운타임 감소와 리소스 최적화",
                "협업 환경과 보안 강화로 제한된 자원의 효율적 관리 실현"
            ],
            "insight": [
                "On-Premise 서버 구축 시, 발열과 전력 소모량, 물리적 공간을 고려하는 중요성을 깨달음",
                "서버 모니터링 시 CPU, 메모리, 디스크 I/O 상태를 관리하여 서버 성능을 유지하는 경험을 쌓음",
                "보안을 위해 외부 네트워크로부터 SSH 접근을 제한하고, 접근 권한을 체계적으로 관리하는 법을 배움"
            ],
            "improvement": [
                "발열과 전력 소모를 줄이기 위해 IDC와 유사한 환경에서의 서버 관리 방안 고려",
                "서버 관리 효율성을 높이기 위해 RACADM, iDRAC 등의 원격 관리 기능 도입 계획"
            ],
            "reference": []
        },
        {
            "subject": "사내 Mattermost 서버 구축 및 관리",
            "period": "2022.10 ~ 2024.06",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Docker",
                "PostgreSQL",
                "Bash",
                "SSL/TLS",
                "Webhook Integration"
            ],
            "challenges": [
                "SSL 인증서 발급 및 적용을 통한 HTTPS 및 HSTS 보안 강화",
                "모바일 환경에서 푸시 알림 설정 및 안정성 확보",
                "Slack 및 Telegram과의 연동성을 높이기 위한 Webhook과 Bot 설정"
            ],
            "contributions": [
                "Docker를 이용한 Mattermost 서버 구축 및 PostgreSQL 데이터베이스 운영",
                "Let's Encrypt를 통해 SSL 인증서를 발급하고, 보안 강화를 위한 HTTPS 및 HSTS 설정",
                "Mattermost 앱과 모바일 푸시 알림 설정을 통해 사용자 접근성 개선",
                "Slack 및 Telegram과의 연동을 위한 Webhook 설정으로 실시간 알림 체계 구축"
            ],
            "performance": [
                "Mattermost을 통한 사내 협업 문화 조성 및 정보 공유 증가",
                "Webhook을 통한 서비스 모니터링 및 통합성 향상으로 실시간 알림 체계 확립",
                "오픈소스 솔루션을 통해 상업적 협업 도구 대비 비용 절감 실현"
            ],
            "description": [
                "사내 협업 툴의 비용 절감을 위해 Mattermost 서버 구축을 진행하고, Docker 기반의 확장성과 이식성을 고려하여 서버 환경을 구성",
                "Mattermost에서 지원하는 PostgreSQL을 Docker 환경에 구축하여 데이터베이스 관리 효율성 증대",
                "Let's Encrypt SSL 인증서 발급을 통한 HTTPS 및 HSTS 설정으로 보안 강화",
                "타 서비스와의 통합을 위해 Webhook과 Bot을 활용하여 Slack, Telegram과의 연동을 실현"
            ],
            "result": [
                "Mattermost에 기반한 사내 협업 환경 구축 및 사내 정보 공유 문화 형성",
                "Slack과 비교하여 호환성 문제 발생 시, 빠르게 해결하여 사용자 불편 최소화 및 관련 비용 절감"
            ],
            "improvement": [
                "SSO를 통한 사용자 인증 강화와 연동성 확보 방안 마련",
                "데이터베이스 백업 및 복구 체계 강화, On-Premise 서버의 장애 대비를 위한 백업 서버 구축"
            ],
            "insight": [
                "Docker의 확장성과 이식성 중요성을 실감하며, Docker 기반 서버 관리의 유연성 배움",
                "오픈소스 솔루션 사용 시, 사용자 편의성, 기능 호환성, 버전 업그레이드에 대한 철저한 계획 필요성 인식",
                "PostgreSQL 데이터베이스 관리 시, 백업 및 복구 방안을 사전에 마련하여 데이터 보호의 중요성 인식"
            ]
        },
        {
            "subject": "사내 Git 서버 구축 및 관리",
            "period": "2022.12 ~ 2024.06",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Git",
                "GitLab",
                "Docker",
                "RESTful API",
                "CI/CD Automation"
            ],
            "challenges": [
                "Git 서버 보안성 강화를 위한 최신 보안 패치 및 HTTPS, HSTS 설정",
                "대용량 파일 관리를 위한 Git-LFS 도입",
                "Docker 기반 GitLab Runner 환경에서 CI/CD 자동화 구축"
            ],
            "contributions": [
                "On-Premise 서버 내 Docker를 이용한 GitLab 서버 구축 및 유지보수",
                "보안 패치가 적용된 최신 GitLab 버전으로 업그레이드하고, Let's Encrypt SSL 인증서 발급으로 HTTPS 및 HSTS 설정 강화",
                "Git-LFS를 통한 Machine Learning 모델 및 대용량 파일 관리 효율화",
                "GitLab API를 이용해 타 서비스와 연동하며, Docker 기반 Runner 환경에서의 CI/CD 파이프라인 설정으로 배포 자동화 실현"
            ],
            "performance": [
                "On-Premise 서버를 통한 Github 대비 비용 절감 실현 및 보안성 강화",
                "CI/CD 자동화를 통한 개발 생산성 증가와 소스 코드 관리 효율화",
                "GitLab API 연동을 통해 Mattermost와 통합하여 협업 효율성 증대"
            ],
            "description": [
                "비용 절감과 보안 강화를 위해 GitHub 대신 사내 GitLab 서버 구축을 추진",
                "Docker 기반 GitLab 서버 환경 구축과 유지보수를 통해 유연한 서버 관리 가능",
                "초기 해킹 시도로 인한 보안 문제 해결을 위해 최신 GitLab 버전으로 업그레이드 및 SSL 인증서 적용",
                "Git-LFS를 도입하여 Machine Learning 모델과 대용량 파일을 효율적으로 관리",
                "GitLab API를 이용해 사내 협업 도구와 연계하여 실시간 서비스 모니터링 및 알림 설정"
            ],
            "result": [
                "GitLab Issues와 Wiki를 통한 사내 협업 효율화 및 소스 코드 관리 일원화",
                "자동화된 CI/CD 파이프라인 구축으로 코드 배포 시간 단축 및 품질 관리 강화",
                "타 서비스와의 통합을 통해 서비스 연동성 및 통합성 증대"
            ],
            "improvement": [
                "보안 패치 자동화 및 최신 버전 업데이트를 통한 보안성 강화 방안 마련",
                "백업 서버 및 데이터베이스 구축을 통한 장애 대비 및 데이터 보호 강화"
            ],
            "insight": [
                "초기 해킹 시도를 통해 보안 패치와 최신 버전 유지의 중요성을 실감하고 대응 경험 쌓음",
                "GitLab API를 통한 다른 서비스와의 연동 시 통합성과 데이터 일관성 관리의 중요성을 인식",
                "CI/CD 파이프라인을 통한 자동화 경험을 통해 서비스 품질 유지와 개발 생산성 향상의 효과 확인"
            ]
        },
        {
            "subject": "일출 서비스 백엔드 서버 구축",
            "period": "2023.04 ~ 2023.09",
            "belong": "주식회사 알을깨는사람들",
            "role": "협업 책임자",
            "skills": [
                "Python",
                "gRPC",
                "Docker",
                "PostgreSQL",
                "PyTorch",
                "Firebase",
                "Azure",
                "Kubernetes",
                "Grafana",
                "Prometheus",
                "dcgm-exporter"
            ],
            "challenges": [
                "서버 언어, 데이터베이스, 통신 프로토콜 등 기술 스택 선정 과정에서의 고려사항",
                "gRPC의 학습 곡선 극복과 초기 설정 최적화",
                "Docker 기반 서버 확장성과 유지보수성 확보",
                "Azure Kubernetes Service(AKS)를 통한 확장성 관리",
                "Google API Key 자동 갱신을 통한 보안 유지"
            ],
            "contributions": [
                "Python, gRPC, Docker, PostgreSQL, PyTorch 등 프로젝트에 최적화된 기술 스택 결정",
                "PyTorch 기반 인공지능 모델 서버 구축 및 데이터베이스 구조 설계",
                "Git flow 기반 협업 환경 조성과 Docker Container를 통한 서버 확장성 확보",
                "AKS를 활용해 서버 확장성과 안정성을 높이고 Firebase로 부가 기능 개발 시간 절감",
                "Grafana, Prometheus, dcgm-exporter를 통해 서버 상태 모니터링 구축"
            ],
            "performance": [
                "gRPC 사용으로 데이터 전송 속도를 RESTful API 대비 약 13% 단축",
                "Docker 기반으로 서버 유지보수 시간을 기존 대비 약 20% 단축",
                "Firebase 도입으로 부가 기능 개발 시간을 25% 절감"
            ],
            "description": [
                "서비스의 주요 요구사항에 따라 Python, gRPC, PostgreSQL 기반 기술 스택을 선택하여 서버 구축",
                "인공지능 모델 PyTorch 활용과 오디오 데이터 송수신을 위해 대역폭 효율성이 높은 gRPC 사용",
                "Docker로 서버를 기능별로 분리하여 확장성과 유지보수성을 개선",
                "Azure Kubernetes Service(AKS)를 사용하여 초기 고성능 장비 부족 문제 해결 및 서버 확장성 보장",
                "모니터링을 통해 MSA 방식이 오버 엔지니어링으로 판단되어, 초기 단계에서는 모놀리식 서버로 설정",
                "지속적인 작업 증가에 대비하여 Firebase를 도입하여 부가 기능 개발에 소요되는 시간과 비용 절감"
            ],
            "result": [
                "기술 스택 최적화와 성능 개선을 통한 데이터 전송 속도 약 13% 단축",
                "Docker와 AKS 기반으로 서버 유지보수성과 확장성을 강화하여 안정적 서비스 제공",
                "gRPC와 Grafana, Prometheus를 통한 실시간 데이터 모니터링으로 장애 발생 빈도 감소"
            ],
            "insight": [
                "gRPC 도입 시 초기 설정과 학습 곡선이 높지만, 효율적 데이터 송수신에 유리함을 경험",
                "기술 트렌드에 따른 MSA 도입이 아닌, 서비스 규모에 적합한 서버 구조 선택이 중요함을 인식",
                "Docker 및 Kubernetes를 통한 서버 확장성과 유지보수성 개선을 경험",
                "기술 요소 도입 시 협의 과정에서 명확한 검토와 타당성 확보가 필요함을 깨달음"
            ],
            "improvement": [
                "웹소켓 및 데이터 폴링을 통한 실시간 데이터 처리 시간 단축",
                "Gitlab CI/CD를 통한 자동화 테스트와 배포 파이프라인 구축",
                "Docker container health check와 실시간 장애 알림 설정으로 운영 안정성 강화"
            ],
            "reference": [
                "/reference_imgs/data_pipeline.webp"
            ]
        },
        {
            "subject": "통합 사내 솔루션 적용",
            "period": "2023.11 ~ 2024.06",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Docker",
                "Python",
                "Network Security"
            ],
            "challenges": [
                "보안과 사용자 편의성을 동시에 고려해 적합한 서버 및 인증 솔루션 선별",
                "Network Security 지식 부족으로 발생한 초기 보안 취약점 해결",
                "비개발자도 편리하게 이용할 수 있도록 사용자 경험을 최적화"
            ],
            "contributions": [
                "Synology를 활용한 OIDC/SAML 기반 SSO 서버 구축으로 사용자 인증 체계 일원화",
                "L2TP/IPSec 기반 VPN 서버 구축으로 외부 접속 시 보안성 및 안정성 강화",
                "Radius 서버를 통해 사내 무선망 접속 보안을 강화하고, 외부 접속 방지"
            ],
            "performance": [
                "SSO 도입 후 비밀번호 오류로 인한 지원 요청 30% 감소",
                "VPN 구축으로 무선망 사용 시 솔루션 접속 속도 약 20% 향상",
                "Radius 서버를 통해 외부 불법 접속 시도를 차단하고 보안 사건 발생 빈도 감소"
            ],
            "description": [
                "사내 솔루션 통합 필요성이 증가함에 따라, OIDC 및 SAML을 기반으로 SSO 서버 구축",
                "사내 무선망 보안 강화를 위해 Synology 기반 L2TP/IPSec VPN 서버를 구축하여, 외부 네트워크에서 접속 시 보안성 증대",
                "Radius 서버를 통해 무선망 보안을 강화하여, 사내망의 외부 불법 접속 방지",
                "VPN 이용자 증가에 대비해 향후 OpenVPN으로의 전환을 고려하여 보안성 향상 계획"
            ],
            "result": [
                "SSO 기반 인증 일원화로 사용자 인증 편의성 증가 및 보안성 강화",
                "VPN 구축을 통해 원격 접속 환경에서의 서비스 사용 효율화",
                "Radius 서버 도입 후 사내 무선망 보안을 강화하여 외부 접속 차단"
            ],
            "insight": [
                "네트워크 보안을 고려할 때, 무선망 및 외부 접속 시 VPN의 보안성 강화 효과를 경험",
                "SSO 도입 시 사용자 편의성 향상과 보안 강화 간의 균형 중요성을 인식",
                "Radius 서버 구축 시 외부 무선망 접속 제어를 통해 무선망 보안을 유지하는 중요성을 깨달음"
            ],
            "improvement": [
                "VPN 사용량 증가 시 OpenVPN 전환 검토를 통해 성능과 보안을 최적화",
                "Synology 보안 패치 자동화를 통해 지속적인 보안성 유지 방안 마련"
            ]
        },
        {
            "subject": "특허 출원 및 등록",
            "period": "2023.03 ~ 2024.03",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Technical Documentation"
            ],
            "challenges": [
                "기술적 내용을 보호하는 특허 작성 및 IP 보호 전략 수립",
                "변리사와 협력하여 기술적 개념을 법적 자산으로 전환하는 과정 관리",
                "변리사 선정 과정에서 기술적 이해도가 높은 인력 선정"
            ],
            "contributions": [
                "특허 출원을 위한 변리사 선정 및 특허 출원 과정 전반을 총괄",
                "기술 보호를 위한 특허 출원서 작성과 법적 요구사항을 반영한 문서 검토",
                "특허 출원 후, 타사로 유출된 정보에 대해 보상 협의를 진행하고 후속 특허 출원 방안 협의"
            ],
            "performance": [
                "경쟁사 서비스 도입 지연 효과를 통해 서비스 보호 및 차별화 실현",
                "특허를 통한 서비스 가치 상승 및 기술보증기금을 통한 자금 확보"
            ],
            "description": [
                "특허 출원 번호: 10-2023-0048347 (인공지능 알고리즘에 기초한 고인의 음성 데이터를 이용하여 심리 상담 서비스를 제공하는 방법",
                "기술적 아이디어 보호를 위해 변리사와 협력해 IP 보호 전략 수립 및 특허 출원",
                "특허 출원서 검토 및 기술 보호를 위한 조정 작업 수행",
                "특허 출원 과정 중 일부 내용이 타사에 유출되어 후속 보상 협의 진행"
            ],
            "result": [
                "특허 출원을 통해 자금 확보(기술보증기금) 및 경쟁사와의 차별화 실현",
                "기술적 자산을 법적 자산으로 전환하여 회사의 IP 보호 체계 확립"
            ],
            "insight": [
                "기술적 개념을 특허로 보호할 때, 내용의 구체화와 추상화의 균형이 중요함을 인식",
                "특허 출원 시, 외부 변리사와의 협업 계약에 보안 사항이 포함되어야 함을 깨달음",
                "특허를 통한 기술 보호가 자금 확보 및 경쟁사 대응에 중요한 전략임을 경험"
            ],
            "improvement": [
                "변리사 선정 시, 기술 이해도가 높은 인력을 선별하기 위한 검증 방안 마련",
                "특허 작성 과정에서 기술적 보호를 극대화할 수 있도록 구체적인 작성 방안 교육 필요",
                "계약서 작성 시 외부 유출 방지에 대한 조항을 추가하여 IP 보호 체계 강화"
            ],
            "reference": [
                "/reference_imgs/patent.webp"
            ]
        },
        {
            "subject": "모바일 앱 개발",
            "period": "2023.08 ~ 2024.03",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Flutter",
                "gRPC",
                "Dart",
                "Firebase",
                "API Integration"
            ],
            "challenges": [
                "모바일 앱 구조 설계와 Flutter 학습 곡선 극복",
                "Firebase를 활용한 데이터베이스 구축, 인증, 메시징과 성능 모니터링 통합",
                "Google Play Store, Apple App Store 등록과 푸시 서버 설정 및 최적화"
            ],
            "contributions": [
                "Flutter 기반 크로스 플랫폼 앱 개발을 통해 Android와 iOS 환경에서 통일된 앱 배포",
                "Firebase 데이터베이스와 클라우드 메시징으로 데이터 관리와 사용자 피드백 수집의 효율성 강화",
                "gRPC를 이용한 음성 데이터 전송 최적화로 데이터 송수신 속도 약 13% 단축"
            ],
            "performance": [
                "외주 인력 없이 자체 개발로 약 40%의 개발 비용 절감",
                "gRPC 사용을 통한 데이터 전송 효율성으로 RESTful API 대비 음성 데이터 전송 속도 약 13% 개선",
                "Firebase의 인증과 성능 모니터링 도입으로 앱 안정성 개선 및 성능 모니터링 시간 20% 단축"
            ],
            "description": [
                "사내 자금 상황상 외주 인력 없이 모바일 앱 개발을 추진",
                "근무시간 외 Flutter를 학습하고, 크로스 플랫폼 앱 개발을 통해 Android와 iOS 지원 확보",
                "Firebase를 통해 데이터베이스와 인증, 성능 모니터링, 클라우드 메시징 등을 통합하여 개발 속도와 관리 효율성 증대",
                "오디오 데이터 송수신 최적화를 위해 RESTful API 대신 gRPC 프로토콜 사용",
                "Google Play Store와 Apple App Store에 앱을 등록하고, 배포 과정에서 푸시 서버 설정 및 문제 해결",
                "테스트 환경을 통해 알파 테스트를 진행하여 초기 사용자 피드백 수렴"
            ],
            "result": [
                "앱 배포 및 사용자 피드백 수집을 통한 기능 개선으로 사용성 향상",
                "Firebase를 통한 개발 시간 약 25% 단축 및 데이터 관리 효율성 강화",
                "gRPC로 인한 음성 데이터 전송 효율성 증가"
            ],
            "insight": [
                "디자인 가이드와 기능 명세서 없이 개발할 경우, 개발 시간 증가 가능성 인식",
                "gRPC의 설정 및 학습이 어려웠으나, 데이터 전송 효율성 면에서 RESTful API 대비 대역폭 절약 효과 확인",
                "Firebase 활용 시, 클라우드 기반 데이터 관리와 성능 모니터링의 편리성 확인",
                "앱 등록과 푸시 서버 설정 시, 최신 가이드 문서가 중요함을 경험",
                "피드백 수렴과 테스트 과정을 통해 기능 개선의 중요성을 실감"
            ],
            "improvement": [
                "앱 개발 이전 명확한 디자인 가이드, 기능 명세서를 수렴하여 개발 시간 최적화",
                "상태 관리 개선을 위해 flutter_riverpod 등의 라이브러리 활용 검토",
                "Supabase 등 대체 가능한 클라우드 서비스를 검토하여 Firebase 대체 가능성 고려"
            ]
        },
        {
            "subject": "음성 인공지능 학습을 위한 데이터 수집 및 전처리",
            "period": "2023.08 ~ 2023.10",
            "belong": "주식회사 알을깨는사람들",
            "role": "책임자",
            "skills": [
                "Python",
                "PyTorch",
                "ffmpeg",
                "Asyncio",
                "Azure BlobStorage",
                "RESTful API"
            ],
            "challenges": [
                "대용량 데이터의 병렬 처리를 위한 비동기 방식 최적화",
                "불량 데이터 선별과 일관된 데이터 포맷 통일을 통한 데이터 품질 개선",
                "저장소 용량 부족 문제 해결과 클라우드 스토리지 비용 최적화"
            ],
            "contributions": [
                "AI HUB에서 18TB 규모의 음성 데이터를 수집하고 불량 데이터를 선별하여 전처리",
                "x11 Forwarding을 통한 데이터 수집 개선, Python Asyncio와 Concurrent.futures로 병렬 처리 효율성 강화",
                "Azure BlobStorage를 통해 클라우드 저장소 확장하여 대용량 데이터 관리",
                "Python의 Soundfile 라이브러리로 음성 파일 처리 속도를 최적화"
            ],
            "performance": [
                "비동기 병렬 처리로 데이터 전처리 시간을 기존 49시간에서 약 18시간으로 63% 단축",
                "전처리를 통해 음성 데이터의 일관성 확보로 모델 학습 정확도 약 15% 향상",
                "Azure BlobStorage 사용으로 온프레미스 대비 스토리지 비용 30% 절감"
            ],
            "description": [
                "AI HUB에서 제공하는 데이터로 약 18TB 규모의 음성 데이터를 수집하고 On-Premise 서버에서 전처리 수행",
                "RESTful API 방식이 불가능하여 x11 Forwarding을 통해 대규모 데이터 수집 및 전처리 환경 개선",
                "Asyncio와 Concurrent.futures를 활용해 음성 데이터 전처리 속도를 기존 49시간에서 18시간으로 단축",
                "Azure BlobStorage를 사용해 저장 용량 확장 및 대규모 데이터 관리 효율성 증대",
                "ffmpeg와 Soundfile로 음성 데이터 전처리 효율성을 높이고, Git Trunk-based Development 방식으로 코드 관리"
            ],
            "result": [
                "SV2TTS, TTS 등 음성 인공지능 학습용 데이터 품질 향상 및 일관성 확보",
                "비동기 병렬 처리를 통해 데이터 전처리 효율을 63% 개선",
                "저장 용량 확장과 클라우드 스토리지 최적화로 대용량 데이터 관리 효율성 강화"
            ],
            "insight": [
                "비동기 병렬 처리의 중요성과 대용량 데이터 처리 효율성을 높이는 기법 습득",
                "대규모 데이터 전처리 시 불량 데이터 관리와 포맷 통일이 모델 학습 품질에 미치는 영향 인식",
                "Azure와 같은 클라우드 스토리지를 이용한 저장 공간 확장의 효율성과 비용 절감을 경험"
            ],
            "improvement": [
                "데이터 전처리 과정에서의 불량 데이터 선별 방안을 더욱 체계화하여 전처리 자동화",
                "대규모 전처리 작업 중 실시간 모니터링 및 로그 관리를 통한 작업 효율성 증대"
            ]
        },
        {
            "subject": "Prompt Test를 위한 테스트 페이지 구축",
            "period": "2023.08 ~ 2024.03",
            "belong": "주식회사 알을깨는사람들",
            "role": "페이지 구축 및 배포 담당자",
            "skills": [
                "Python",
                "Streamlit",
                "Docker",
                "SQLite3",
                "LangChain",
                "Async Programming"
            ],
            "challenges": [
                "여러 LLM 모델의 동시 요청에 따른 서버 자원 관리와 성능 최적화",
                "비개발자를 위한 직관적 UI 구현과 사용자 경험 향상",
                "테스트 환경에서 프롬프트 정보와 버전 관리를 효율적으로 수행"
            ],
            "contributions": [
                "Streamlit으로 Prompt Test 페이지 구축해 비개발자도 손쉽게 사용 가능",
                "Python의 Asyncio를 활용한 비동기 처리로 다양한 LLM 모델의 동시 요청을 처리",
                "SQLite3 기반 데이터베이스로 프롬프트 정보와 버전 이력을 관리하여 효율성 증대",
                "Docker로 폐쇄망 환경에서도 배포 가능하게 하여 안정적인 테스트 환경 구축"
            ],
            "performance": [
                "비동기 처리 적용으로 테스트 시간 약 2~5분 단축",
                "Streamlit UI로 비개발자도 사용 가능한 환경 구축",
                "SQLite3를 통한 데이터 관리로 작은 데이터셋에 적합한 성능 제공 및 관리 효율성 강화"
            ],
            "description": [
                "여러 LLM 모델(ChatGPT, Claud AI, Gemini)의 성능과 비용을 비교하기 위해 Prompt Test 페이지를 구축",
                "테스트 페이지 구축 시, 빠른 배포가 필요한 상황에 따라 Streamlit 사용하여 신속히 UI 구현",
                "데이터베이스 크기가 작은 특성을 고려해 SQLite3로 프롬프트 정보와 버전 관리 수행",
                "Docker를 이용해 On-Premise 서버 배포로 폐쇄망 환경에서의 사용을 고려하여 운영 효율성 극대화",
                "Python Asyncio를 통한 비동기 처리를 통해 모델의 동시 요청으로 테스트 시간을 단축하여 성능 최적화"
            ],
            "result": [
                "Prompt Test 페이지를 통해 각 LLM 모델의 성능 및 비용 비교 완료",
                "다양한 모델 성능 비교 작업을 통해 향후 모델 선택의 기준 마련",
                "비동기 처리를 통해 요청 처리 시간을 단축하여 테스트 환경의 효율성 증대"
            ],
            "insight": [
                "Streamlit 대신 FastAPI와 같은 백엔드 프레임워크가 비동기 처리와 성능 최적화에 더 적합할 수 있음을 인식",
                "Docker를 이용해 On-Premise 서버 배포 시 폐쇄망 환경에서도 유연한 배포 가능성을 확인",
                "소규모 데이터 관리에는 SQLite3가 간단하고 빠른 성능을 제공할 수 있음을 확인"
            ],
            "improvement": [
                "FastAPI와 같은 비동기 웹 프레임워크를 통한 성능 최적화 검토",
                "각 LLM 모델의 API 요청 및 응답 토큰을 별도로 관리하여 데이터 통합성 확보"
            ]
        },
        {
            "subject": "마케팅 사전예약 랜딩페이지 제작",
            "period": "2023.12 ~ 2024.01",
            "belong": "주식회사 알을깨는사람들",
            "role": "페이지 구축 및 배포 담당자",
            "skills": [
                "Docker",
                "React",
                "Nginx",
                "Azure",
                "FastAPI",
                "SQLite3",
                "Security"
            ],
            "challenges": [
                "로컬 Docker 환경에서의 프론트엔드-백엔드 연동과 컨테이너 기반 배포 최적화",
                "사용자 데이터 보호와 보안을 위한 암호화 설계 및 성능 최적화",
                "Azure VM에서의 Docker 기반 서버 배포 및 운영 환경 설정"
            ],
            "contributions": [
                "Docker로 컨테이너 기반 React 및 FastAPI 환경 구축하여 로컬에서 통합 테스트 수행",
                "Docker Network로 프론트엔드와 백엔드를 연결하여 유기적 연동 환경 마련",
                "FastAPI를 활용한 백엔드 API 설계 및 SQLite3 데이터베이스로 사용자 입력 정보 관리",
                "SHA-256과 Random Salt를 적용한 사용자 데이터 암호화로 데이터 보안 강화",
                "Azure VM에서 Nginx로 리버스 프록시 설정하여 Docker 컨테이너 배포 완료"
            ],
            "performance": [
                "비동기 요청을 통해 사용자 입력 정보를 안전하게 수집하며 사전예약 응답 시간 30% 단축",
                "Docker 기반 배포로 로컬 환경과 운영 환경 간 일관성 유지 및 배포 시간 약 50% 절감",
                "암호화 방식 도입으로 사용자 데이터 보안을 강화하여 보안성 향상"
            ],
            "description": [
                "사전예약 페이지로 사용자 이름, 전화번호 등 사용자 데이터를 수집하기 위해 React와 FastAPI를 사용하여 프론트엔드와 백엔드 서버 구축",
                "Docker를 통해 로컬 환경에서 프론트엔드와 백엔드를 구성하고 Docker Network로 연동하여 통합 테스트 수행",
                "사용자 입력 데이터의 보안을 위해 hashlib을 이용해 SHA-256로 암호화하여 SQLite3에 저장",
                "Azure VM에 Nginx를 통해 리버스 프록시 설정하여 Docker 컨테이너로 배포 완료"
            ],
            "result": [
                "마케팅 사전예약 페이지로 사용자 사전예약 완료",
                "컨테이너 기반 배포로 인해 배포 안정성 및 보안성 강화",
                "암호화 적용으로 보안 수준을 향상시켜 사용자 정보 보호"
            ],
            "insight": [
                "컨테이너 환경에서 Docker Network를 이용한 프론트엔드와 백엔드 연동의 중요성 이해",
                "사용자 데이터 암호화 시 hashlib을 이용해 SHA-256를 적용하여 보안과 성능의 균형이 중요함을 인식",
                "Azure VM에서 Docker 컨테이너 배포 시 Nginx로 리버스 프록시 설정을 통해 배포 효율성을 높일 수 있음을 경험"
            ],
            "improvement": [
                "hashlib 대신 bcrypt와 같은 더 안전한 암호화 방식을 적용하여 보안성 강화",
                "PostgreSQL 도입을 통한 데이터베이스 확장과 복잡한 데이터 쿼리 지원 검토"
            ]
        },
        {
            "subject": "음성 인공지능을 위한 모델 설계 및 학습",
            "period": "2023.10 ~ 2024.06",
            "belong": "주식회사 알을깨는사람들",
            "role": "프로젝트 책임자",
            "skills": [
                "Python",
                "PyTorch",
                "CUDA",
                "cuDNN",
                "TensorBoard",
                "Azure GPU",
                "Transformers"
            ],
            "challenges": [
                "대규모 음성 데이터를 활용한 모델 성능 최적화",
                "클라우드 GPU 서버 사용으로 인한 비용 관리 및 자원 효율화",
                "모델 학습 시각화와 학습 시간 단축을 위한 성능 개선"
            ],
            "contributions": [
                "SV2TTS 논문 기반으로 모델 학습과 성능 개선을 위한 인공지능 프로세스 수립",
                "Azure GPU 서버(V100, A10, A100) 환경을 사용해 고성능 학습 환경 구축 및 비용 관리",
                "화자 식별을 위한 Speaker Encoder 모델 설계와 CUDA, cuDNN을 이용한 GPU 가속화로 학습 시간 40% 단축",
                "CBHG 모델을 Transformer로 대체하여 학습 시간 약 30% 감소, 모델 성능 15% 향상",
                "TensorBoard를 이용해 모델 학습 과정을 시각화하고 결과를 분석하여 학습 효율성을 높임"
            ],
            "performance": [
                "Transformer 도입으로 CBHG 모델 대비 학습 속도 약 30% 단축 및 성능 15% 개선",
                "Azure GPU 서버 활용으로 학습 시간 기존 대비 약 50% 단축",
                "TensorBoard를 통한 실시간 학습 과정 시각화로 학습 오류를 사전 발견 및 교정하여 작업 효율성 20% 향상"
            ],
            "description": [
                "SV2TTS 논문을 바탕으로 음성 인공지능 모델 설계와 학습을 위한 프로세스 수립",
                "Speaker Encoder 모델을 구축하여 화자 식별 성능을 강화하고, CUDA와 cuDNN을 사용해 GPU 가속화",
                "Tacotron 및 WaveGlow 모델을 활용해 초기 목소리 생성 모델 학습",
                "CBHG 모델의 성능 이슈를 해결하기 위해 Transformer로 대체하여 학습 속도와 성능 최적화",
                "모델 학습 과정에서 TensorBoard를 사용하여 시각화하고, Azure GPU 서버 환경에서 비용 최적화 관리",
                "최종적으로 회사 자금 부족으로 학습 및 프로젝트 전체 중단"
            ],
            "result": [
                "Speaker Encoder 모델을 통해 화자 식별 모델을 구축하여 정확도 향상",
                "CBHG 모델을 Transformer로 교체해 성능 개선",
                "Azure GPU 서버로 클라우드 기반 학습 환경을 구축하여 On-Premise 서버 대비 학습 시간 60% 절감"
            ],
            "insight": [
                "AI 모델 학습에서 고성능 GPU 환경의 중요성과 자원 최적화 필요성을 경험",
                "CBHG 모델 대비 Transformer 모델의 효율성을 확인하며 성능 최적화 방안을 습득",
                "TensorBoard 시각화가 모델 학습 과정의 이해와 효율화에 미치는 영향을 인식"
            ],
            "improvement": [
                "On-Premise 서버와 클라우드 서버 혼합 사용으로 학습 환경 비용 절감 방안 검토",
                "모델 학습 전 단계에서 데이터 전처리 자동화로 모델 성능 향상 가능성 탐색",
                "고성능 모델 학습 시 비용 절감과 자원 최적화 방안을 위한 추가 검토"
            ]
        },
        {
            "subject": "TradeFactory 웹 개발 및 호스팅",
            "period": "2024.04 ~ 2024.06",
            "belong": "프리랜서",
            "role": "프로젝트 책임자",
            "skills": [
                "Wordpress",
                "Nginx",
                "JavaScript",
                "Docker",
                "Python",
                "FastAPI",
                "Security"
            ],
            "challenges": [
                "Docker 환경에서 웹 서버와 데이터베이스 연동 및 컨테이너 관리 최적화",
                "비개발자가 쉽게 웹페이지를 수정할 수 있는 편의성과 보안성 간의 균형"
            ],
            "contributions": [
                "Docker 환경 내 bitnami/wordpress-nginx와 bitnami/mariadb 이미지를 사용해 웹 서버와 데이터베이스 환경 구축",
                "Docker Network를 이용하여 웹 서버와 데이터베이스 간의 연동 및 통합 테스트 수행",
                "FastAPI로 클라이언트 요청 파일 기반 주문 접수 기능 구현",
                "CORS 설정과 XSS, CSRF 방지 및 Nginx의 리버스 프록시 설정을 통해 웹 보안 강화",
                "Let's Encrypt를 이용해 SSL 인증서를 발급하고 HTTPS로 보안 통신 설정"
            ],
            "performance": [
                "Docker와 OCI VM을 활용해 개발과 운영 환경의 일관성을 확보하여 배포 시간 40% 단축",
                "SSL 적용으로 HTTPS 통신이 가능해져 사용자 신뢰도 증가",
                "FastAPI를 이용해 클라이언트 요구에 맞춘 주문 접수 기능 구현 완료"
            ],
            "description": [
                "OCI Ubuntu VM을 기반으로 호스팅 서버를 구축하고, Docker를 사용해 Wordpress와 MariaDB 기반의 웹 서버 환경 구성",
                "비개발자도 편리하게 관리할 수 있는 Wordpress와 플러그인으로 웹 개발",
                "클라이언트 요청으로 FastAPI를 사용해 주문 접수 기능을 추가로 개발",
                "CORS 설정과 SSL 적용으로 웹 보안 강화 및 Docker Network로 서버와 DB 연동"
            ],
            "result": [
                "Wordpress 사용으로 비개발자도 쉽게 웹 페이지 관리 가능",
                "Docker 기반 웹 서버로 확장성과 일관성 확보",
                "주문 접수 기능을 포함한 클라이언트 요구사항에 맞춘 웹 개발 완료"
            ],
            "insight": [
                "비개발자를 위한 웹 관리 환경에서는 편의성과 보안성 간 균형이 필요함을 인식",
                "SSL과 CORS 설정의 보안 강화가 웹 서비스 신뢰성에 미치는 영향을 이해",
                "비개발자와의 의사소통 시, 보안에 대한 교육과 인식 제고의 중요성 경험"
            ],
            "improvement": [
                "FastAPI에 OAuth 2.0을 도입해 인증 절차 강화 검토",
                "Docker와 보안 정책을 통해 보안 취약점을 분석하고 보완",
                "Wordpress 대신 Django와 같은 백엔드 프레임워크를 사용하여 보안성과 확장성을 높일 수 있는 방안 검토"
            ]
        },
        {
            "subject": "쿠팡 파트너스 자동화 프로그램",
            "period": "2024.05 ~ 2024.07",
            "belong": "프리랜서",
            "role": "프로젝트 책임자",
            "skills": [
                "Python",
                "FastAPI",
                "Selenium",
                "Pyinstaller",
                "Svelte",
                "TypeScript",
                "RESTful API",
                "hmac Authentication"
            ],
            "challenges": [
                "ARM 기반 Windows 호환성 문제 해결 및 다양한 OS에서의 프로그램 배포 최적화",
                "쿠팡 파트너스 API와 Naver Open API를 이용한 데이터 수집 및 자동 포스팅 기능 구현",
                "hmac 기반 API 인증과 보안 최적화"
            ],
            "contributions": [
                "쿠팡 파트너스 API와 Naver Open API를 통합하여 상품 정보 수집 및 자동 포스팅 프로그램 구축",
                "ARM 기반 Windows 호환성 문제를 해결하기 위해 Svelte 기반 Web Application으로 전환하여 다중 빌드 요구 사항 해소",
                "FastAPI로 백엔드 API 구현 및 Selenium을 통한 자동 로그인 기능으로 Naver API 제한 우회",
                "hmac 인증을 위한 Python의 hashlib을 사용하여 API 호출 시 인증 보안 강화",
                "JWT를 이용해 사용자 인증을 구현하여 반복적인 로그인 과정을 최소화",
                "PyInstaller로 프론트엔드와 백엔드 기능을 Windows 실행 파일로 빌드하여 배포 간소화",
                "Github Release와 Issues 기능을 통해 사용자 피드백을 수렴하고 개선 사항 반영"
            ],
            "performance": [
                "ARM 기반 Windows 호환성 문제 해결로 OS 환경에 따른 빌드 문제 약 70% 감소",
                "Svelte 전환으로 CLI 환경의 불편함을 해소하고 사용자 친화적 GUI 제공",
                "hmac 인증으로 쿠팡 파트너스 API 호출 시 보안성 25% 강화",
                "Github Issue를 통한 사용자 피드백 반영으로 기능 개선 15% 달성"
            ],
            "description": [
                "쿠팡 파트너스 API와 FastAPI, Selenium을 이용해 상품 정보 수집과 자동 포스팅 기능을 개발",
                "Flutter로 빌드된 Windows Application에서의 호환성 문제를 해결하기 위해 Svelte로 Web Application 빌드 전환",
                "쿠팡 파트너스 API의 hmac 인증을 구현하고, Naver Open API의 제한을 우회하기 위해 Selenium으로 자동 로그인 구현",
                "Chrome Profile과 JWT를 이용해 불필요한 로그인 반복을 줄이며 사용자 편의성 증대",
                "Github을 통한 배포와 사용자 피드백 수렴, 업데이트 기능 추가로 유지보수 효율성 강화"
            ],
            "result": [
                "쿠팡 파트너스 API와 Naver Open API 통합을 통한 자동화 프로그램 완성",
                "Svelte를 통한 Web Application 전환으로 Windows 호환성 문제 해결",
                "CLI에서 GUI로 전환하여 사용자 편의성 강화 및 유지보수 효율화 달성"
            ],
            "insight": [
                "네트워크 보안과 hmac 인증의 중요성을 인식하고, API 보안 강화를 위해 인증 개념을 경험",
                "ARM 및 AMD 기반 Windows 환경의 호환성 문제를 겪으며 플랫폼 간 개발 최적화 필요성을 인식",
                "CLI보다 GUI 환경이 비개발자 사용자 경험에 미치는 영향을 이해",
                "프로젝트 진행 중 요구사항 변경과 소통의 중요성을 경험"
            ],
            "improvement": [
                "프로그램 보안을 위해 OAuth2.0 인증 도입을 검토"
            ]
        }
    ]
}